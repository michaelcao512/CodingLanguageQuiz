generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  name              String?
  email             String?          @unique
  password          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  personalityTypeId Int?
  biography         String?          @db.Text
  PersonalityType   PersonalityType? @relation(fields: [personalityTypeId], references: [id])
  userChoices       UserChoice[]

  @@index([personalityTypeId], map: "User_personalityTypeId_fkey")
}

model Question {
  id      Int      @id @default(autoincrement())
  text    String
  choices Choice[]
}

model Choice {
  id                Int             @id @default(autoincrement())
  text              String
  questionId        Int
  personalityTypeId Int
  personalityType   PersonalityType @relation(fields: [personalityTypeId], references: [id], onDelete: Cascade)
  question          Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userChoices       UserChoice[]

  @@index([personalityTypeId], map: "Choice_personalityTypeId_fkey")
  @@index([questionId], map: "Choice_questionId_fkey")
}

model PersonalityType {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  Choice      Choice[]
  User        User[]
}

model UserChoice {
  id       Int    @id @default(autoincrement())
  userId   Int
  choiceId Int
  choice   Choice @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([choiceId], map: "UserChoice_choiceId_fkey")
  @@index([userId], map: "UserChoice_userId_fkey")
}
